# You must change these to your own details.
[package]
authors = ["You <you@example.com>"]
categories = ["wasm"]
description = "Walk the Dog - the game for the Rust Games with WebAssembly book"
edition = "2021"
name = "rust-webpack-template"
readme = "README.md"
version = "0.1.0"

[lib]
crate-type = ["cdylib"]

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[features]
# If you uncomment this line, it will enable `wee_alloc`:
#default = ["wee_alloc"]

[dependencies]
async-std = "1.12.0"
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
console_error_panic_hook = "0.1.7"
futures = "0.3.17"
getrandom = {version = "0.2", features = ["js"]}
rand = "0.8.4"
serde = {version = "1.0.188", features = ["derive"]}
wasm-bindgen = "0.2.45"
wasm-bindgen-futures = "0.4.28"

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
wee_alloc = {version = "0.4.2", optional = true}

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
features = ["console", "Window", "Response", "Document", "HtmlCanvasElement", "HtmlImageElement", "CanvasRenderingContext2d", "Element"]
version = "0.3.22"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# # in debug mode.
# [target."cfg(debug_assertions)".dependencies]
# console_error_panic_hook = "0.1.5"

# These crates are used for running unit tests.
[dev-dependencies]
futures = "0.3.18"
js-sys = "0.3.55"
wasm-bindgen-test = "0.2.45"
